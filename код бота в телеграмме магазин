import json
import sqlite3

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

TOKEN = "7754017118:AAF8inVsWtgjR46_J7GVVhgL6IcjMurVnpI"
OWNER_CHAT_ID = "5299337854"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–∫–∞–∑–∞
GET_NAME, GET_PHONE = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "shop_bot.db"


def load_shop_data():
    try:
        with open("shop_data.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            "name": "üî• Es computers",
            "address": "–≥.–ö—É—Ä—Å–∫ —ç–ª–µ–≤–∞—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫ 2",
            "phone": "+7 904 524 69 68",
            "website": "",
            "work_time": "üïí –ü–Ω-–ü—Ç: 10:00-19:00, –°–±-–í—Å: 11:00-17:00",
            "categories": ["üíª –ù–æ—É—Ç–±—É–∫–∏", "üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä—ã", "üì± –ì–∞–¥–∂–µ—Ç—ã", "üéß –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"],
            "products": {
                "üíª –ù–æ—É—Ç–±—É–∫–∏": [
                    {
                        "id": 1,
                        "name": "ASUS X515",
                        "price": 45000,
                        "description": "–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –∏–≥—Ä",
                        "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Core i5\n–û–ó–£: 8 –ì–ë\n–î–∏—Å–∫: 512 –ì–ë SSD",
                        "photo_url": "2025-05-04_11-03-46.png",
                    }
                ]
            },
        }


SHOP_INFO = load_shop_data()
PRODUCTS = SHOP_INFO["products"]


def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("""  
    CREATE TABLE IF NOT EXISTS orders (  
        order_id INTEGER PRIMARY KEY AUTOINCREMENT,  
        user_id INTEGER,  
        user_name TEXT,  
        user_phone TEXT,  
        product_name TEXT,  
        product_price REAL,  
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
    )  
    """)

    conn.commit()
    conn.close()


init_db()


def format_price(price: float) -> str:
    return f"{price:,.0f} —Ä—É–±".replace(",", " ")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        ["üìç –ê–¥—Ä–µ—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
        ["üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "üõí –¢–æ–≤–∞—Ä—ã"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>{SHOP_INFO['name']}</b>!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=reply_markup,
        parse_mode="HTML",
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    response = None
    keyboard = None

    if text == "üìç –ê–¥—Ä–µ—Å":
        response = f"üè¨ <b>–ù–∞—à –∞–¥—Ä–µ—Å:</b>\n{SHOP_INFO['address']}"
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        response = f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {SHOP_INFO['phone']}\nüåê <b>–°–∞–π—Ç:</b> {SHOP_INFO['website']}"
    elif text == "üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã":
        response = f"‚è≥ <b>–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:</b>\n{SHOP_INFO['work_time']}"
    elif text == "üõí –¢–æ–≤–∞—Ä—ã":
        keyboard = [
            SHOP_INFO["categories"][i:i + 2]
            for i in range(0, len(SHOP_INFO["categories"]), 2)
        ]
        keyboard.append(["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        response = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        keyboard = [
            ["üìç –ê–¥—Ä–µ—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            ["üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "üõí –¢–æ–≤–∞—Ä—ã"],
        ]
        response = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    elif text == "‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        keyboard = [
            SHOP_INFO["categories"][i:i + 2]
            for i in range(0, len(SHOP_INFO["categories"]), 2)
        ]
        keyboard.append(["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        response = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    elif text in PRODUCTS:
        context.user_data["current_category"] = text
        products = [product["name"] for product in PRODUCTS[text]]
        keyboard = [[product] for product in products] + [["‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"]]
        response = f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {text}:"
    else:
        current_category = context.user_data.get("current_category")
        if current_category:
            for product in PRODUCTS.get(current_category, []):
                if text == product["name"]:
                    context.user_data["current_product"] = product
                    response = (
                        f"<b>{product['name']}</b>\n"
                        f"<i>{product['description']}</i>\n"
                        f"üíµ –¶–µ–Ω–∞: {format_price(product['price'])}\n"
                        f"üìù –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n{product['specs']}"
                    )
                    keyboard = [["üõí –ó–∞–∫–∞–∑–∞—Ç—å"], ["‚¨ÖÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º"]]
                    if product.get("photo_url"):
                        await update.message.reply_photo(
                            product["photo_url"],
                            caption=response,
                            parse_mode="HTML",
                            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
                        )
                        return
                    break

    if response:
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else None
        await update.message.reply_text(response, reply_markup=reply_markup, parse_mode="HTML")


async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if 'current_product' not in context.user_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return ConversationHandler.END

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    return GET_NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True
        )
    )
    return GET_PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if update.message.contact:
            phone = update.message.contact.phone_number
        else:
            phone = update.message.text

        product = context.user_data['current_product']
        name = context.user_data['name']

        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO orders (user_id, user_name, user_phone, product_name, product_price) "
            "VALUES (?, ?, ?, ?, ?)",
            (update.message.from_user.id, name, phone, product['name'], product['price'])
        )
        conn.commit()
        conn.close()

        order_info = (
            f"üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üõç –¢–æ–≤–∞—Ä: {product['name']}\n"
            f"üíµ –¶–µ–Ω–∞: {format_price(product['price'])}\n"
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: @{update.message.from_user.username}"
        )

        await context.bot.send_message(
            chat_id=OWNER_CHAT_ID,
            text=order_info
        )

        await update.message.reply_text(
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return ConversationHandler.END

    except Exception as e:
        print(f"Database error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
    )
    return ConversationHandler.END


def main() -> None:
    app = Application.builder().token(TOKEN).build()

    order_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^üõí –ó–∞–∫–∞–∑–∞—Ç—å$"), start_order)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT, get_name)],
            GET_PHONE: [MessageHandler(filters.TEXT | filters.CONTACT, get_phone)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_order),
            MessageHandler(filters.Regex(r"^‚¨ÖÔ∏è"), cancel_order)
        ]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(order_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()


if __name__ == "__main__":
    main()
