import json
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

TOKEN = "7754017118:AAF8inVsWtgjR46_J7GVVhgL6IcjMurVnpI"
OWNER_CHAT_ID = "5299337854"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–∫–∞–∑–∞
GET_NAME, GET_PHONE = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "shop_bot.db"


def load_shop_data():
    try:
        with open("shop_data.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            "name": "üî• Es computers",
            "address": "–≥.–ö—É—Ä—Å–∫ —ç–ª–µ–≤–∞—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫ 2",
            "phone": "+7 904 524 69 68",
            "work_time": "üïí –ü–Ω-–ü—Ç: 10:00-19:00, –°–±-–í—Å: 11:00-17:00",
            "categories": ["üíª –ù–æ—É—Ç–±—É–∫–∏", "üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä—ã", "üì± –ì–∞–¥–∂–µ—Ç—ã", "üéß –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"],
            "products": {
                "üíª –ù–æ—É—Ç–±—É–∫–∏": [
                    {
                        "id": 1,
                        "name": "ASUS X515",
                        "price": 45000,
                        "description": "–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –∏–≥—Ä",
                        "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Core i5\n–û–ó–£: 8 –ì–ë\n–î–∏—Å–∫: 512 –ì–ë SSD",
                        "photo_url": "2025-05-04_11-03-46.png",
                    },
                    {
                        "id": 2,
                        "name": "Lenovo IdeaPad 5",
                        "price": 55000,
                        "description": "–°—Ç–∏–ª—å–Ω—ã–π –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ—É—Ç–±—É–∫",
                        "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 7\n–û–ó–£: 16 –ì–ë\n–î–∏—Å–∫: 1 –¢–ë SSD",
                        "photo_url": "2025-05-04_11-03-00.png",
                    },
                    {
                        "id": 3,
                        "name": "Apple MacBook Air M1",
                        "price": 89990,
                        "description": "–£–ª—å—Ç—Ä–∞—Ç–æ–Ω–∫–∏–π –Ω–æ—É—Ç–±—É–∫ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º Apple M1",
                        "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Apple M1\n–û–ó–£: 8 –ì–ë\n–î–∏—Å–∫: 256 –ì–ë SSD",
                        "photo_url": "2025-05-14_19-07-56.png",
                    }
                ],
                "üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä—ã": [
                    {
                        "id": 4,
                        "name": "–ò–≥—Ä–æ–≤–æ–π PC AMD",
                        "price": 75000,
                        "description": "–ú–æ—â–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä",
                        "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 5 5600X\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: NVIDIA RTX 3060\n–û–ó–£: 16 –ì–ë\n–î–∏—Å–∫: 1 –¢–ë SSD",
                        "photo_url": "2025-05-04_10-58-36.png",
                    },
                    {
                        "id": 5,
                        "name": "–û—Ñ–∏—Å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä",
                        "price": 35000,
                        "description": "–ù–∞–¥–µ–∂–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –æ—Ñ–∏—Å–∞",
                        "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Core i3\n–û–ó–£: 8 –ì–ë\n–î–∏—Å–∫: 512 –ì–ë SSD",
                        "photo_url": "2025-05-14_19-13-05.png",
                    },
                    {
                        "id": 6,
                        "name": "–ú–æ–Ω–æ–±–ª–æ–∫ Lenovo",
                        "price": 65000,
                        "description": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—Å–µ-–≤-–æ–¥–Ω–æ–º",
                        "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Core i5\n–û–ó–£: 12 –ì–ë\n–î–∏—Å–∫: 512 –ì–ë SSD\n–≠–∫—Ä–∞–Ω: 23.8\"",
                        "photo_url": "2025-05-14_19-14-09.png",
                    }
                ],
                "üì± –ì–∞–¥–∂–µ—Ç—ã": [
                    {
                        "id": 7,
                        "name": "Samsung Galaxy S23",
                        "price": 79990,
                        "description": "–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω",
                        "specs": "–≠–∫—Ä–∞–Ω: 6.1\" AMOLED\n–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Snapdragon 8 Gen 2\n–ü–∞–º—è—Ç—å: 256 –ì–ë",
                        "photo_url": "2025-05-14_19-20-18.png",
                    },
                    {
                        "id": 8,
                        "name": "Apple iPad Air",
                        "price": 59990,
                        "description": "–ú–æ—â–Ω—ã–π –ø–ª–∞–Ω—à–µ—Ç —Å –¥–∏—Å–ø–ª–µ–µ–º Retina",
                        "specs": "–≠–∫—Ä–∞–Ω: 10.9\"\n–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Apple M1\n–ü–∞–º—è—Ç—å: 256 –ì–ë",
                        "photo_url": "2025-05-14_19-21-01.png",
                    },
                    {
                        "id": 9,
                        "name": "Xiaomi Redmi Note 12",
                        "price": 24990,
                        "description": "–°–º–∞—Ä—Ç—Ñ–æ–Ω —Å –æ—Ç–ª–∏—á–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞",
                        "specs": "–≠–∫—Ä–∞–Ω: 6.67\" AMOLED\n–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Snapdragon 685\n–ü–∞–º—è—Ç—å: 128 –ì–ë",
                        "photo_url": "2025-05-14_19-21-50.png",
                    }
                ],
                "üéß –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": [
                    {
                        "id": 10,
                        "name": "–ù–∞—É—à–Ω–∏–∫–∏ Sony WH-1000XM5",
                        "price": 29990,
                        "description": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º",
                        "specs": "–¢–∏–ø: –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ\n–ê–∫—Ç–∏–≤–Ω–æ–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ\n–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: 30 —á",
                        "photo_url": "2025-05-14_19-23-17.png",
                    },
                    {
                        "id": 11,
                        "name": "–ú—ã—à—å Logitech MX Master 3",
                        "price": 8990,
                        "description": "–≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω–∞—è –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –º—ã—à—å",
                        "specs": "–¢–∏–ø: –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è\n–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 4000 dpi\n–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: 70 –¥–Ω–µ–π",
                        "photo_url": "2025-05-14_19-24-10.png",
                    },
                    {
                        "id": 12,
                        "name": "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ Keychron K2",
                        "price": 12990,
                        "description": "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π",
                        "specs": "–¢–∏–ø: –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: Bluetooth/USB\n–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏: Gateron",
                        "photo_url": "2025-05-14_19-24-53.png",
                    }
                ]
            }
        }


SHOP_INFO = load_shop_data()
PRODUCTS = SHOP_INFO["products"]


def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("""  
    CREATE TABLE IF NOT EXISTS orders (  
        order_id INTEGER PRIMARY KEY AUTOINCREMENT,  
        user_id INTEGER,  
        user_name TEXT,  
        user_phone TEXT,  
        product_name TEXT,  
        product_price REAL,  
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
    )  
    """)

    conn.commit()
    conn.close()


init_db()


def format_price(price: float) -> str:
    return f"{price:,.0f} —Ä—É–±".replace(",", " ")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        ["üìç –ê–¥—Ä–µ—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
        ["üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "üõí –¢–æ–≤–∞—Ä—ã"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>{SHOP_INFO['name']}</b>!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=reply_markup,
        parse_mode="HTML",
    )


async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        SHOP_INFO["categories"][i:i + 2]
        for i in range(0, len(SHOP_INFO["categories"]), 2)
    ]
    keyboard.append(["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
    )


async def search_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.args:
            await update.message.reply_text("üîç <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /search <b><–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞></b>",
                                            parse_mode="HTML")
            return

        query = " ".join(context.args).lower()
        found_products = []

        for category, products in PRODUCTS.items():
            for product in products:
                if query in product["name"].lower():
                    found_products.append((category, product))

        if not found_products:
            await update.message.reply_text("üîé <b>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                                            parse_mode="HTML")
            return

        response = "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>\n\n"
        for category, product in found_products:
            response += (
                f"üìå <b>{product['name']}</b> (<i>{category}</i>)\n"
                f"üíµ –¶–µ–Ω–∞: {format_price(product['price'])}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n\n"
            )

        await update.message.reply_text(response, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /search: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_popular(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î (–ø–æ –∫–æ–ª-–≤—É –∑–∞–∫–∞–∑–æ–≤)
    popular_products = [
        PRODUCTS["üíª –ù–æ—É—Ç–±—É–∫–∏"][2],  # MacBook Air M1
        PRODUCTS["üì± –ì–∞–¥–∂–µ—Ç—ã"][0],  # Samsung Galaxy S23
        PRODUCTS["üéß –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"][0]  # Sony WH-1000XM5
    ]

    response = "üî• <b>–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n\n"
    for product in popular_products:
        response += (
            f"üìå <b>{product['name']}</b>\n"
            f"üíµ –¶–µ–Ω–∞: {format_price(product['price'])}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n\n"
        )

    await update.message.reply_text(response, parse_mode="HTML")


async def handle_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì© –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∏—à–∏—Ç–µ @Sokolovskiq",
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True),
    )


async def show_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        f"üè¨ <b>{SHOP_INFO['name']}</b>\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {SHOP_INFO['address']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {SHOP_INFO['phone']}\n"
        f"üïí <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> {SHOP_INFO['work_time']}\n"
    )
    await update.message.reply_text(text, parse_mode="HTML")


async def clear_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True),
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    response = None
    keyboard = None

    if text == "üìç –ê–¥—Ä–µ—Å":
        response = f"üè¨ <b>–ù–∞—à –∞–¥—Ä–µ—Å:</b>\n{SHOP_INFO['address']}"
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        response = f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {SHOP_INFO['phone']}"
    elif text == "üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã":
        response = f"‚è≥ <b>–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:</b>\n{SHOP_INFO['work_time']}"
    elif text == "üõí –¢–æ–≤–∞—Ä—ã":
        await show_categories(update, context)
        return
    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        keyboard = [
            ["üìç –ê–¥—Ä–µ—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            ["üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "üõí –¢–æ–≤–∞—Ä—ã"],
        ]
        response = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    elif text == "‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        await show_categories(update, context)
        return
    elif text == "‚¨ÖÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º":
        current_category = context.user_data.get("current_category")
        if current_category:
            products = [product["name"] for product in PRODUCTS[current_category]]
            keyboard = [[product] for product in products] + [["‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"]]
            response = f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {current_category}:"
        else:
            response = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
    elif text in PRODUCTS:
        context.user_data["current_category"] = text
        products = [product["name"] for product in PRODUCTS[text]]
        keyboard = [[product] for product in products] + [["‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"]]
        response = f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {text}:"
    else:
        current_category = context.user_data.get("current_category")
        if current_category:
            for product in PRODUCTS.get(current_category, []):
                if text == product["name"]:
                    context.user_data["current_product"] = product
                    response = (
                        f"<b>{product['name']}</b>\n"
                        f"<i>{product['description']}</i>\n"
                        f"üíµ –¶–µ–Ω–∞: {format_price(product['price'])}\n"
                        f"üìù –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n{product['specs']}"
                    )
                    keyboard = [["üõí –ó–∞–∫–∞–∑–∞—Ç—å"], ["‚¨ÖÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º"]]
                    if product.get("photo_url"):
                        await update.message.reply_photo(
                            product["photo_url"],
                            caption=response,
                            parse_mode="HTML",
                            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
                        )
                        return
                    break

    if response:
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else None
        await update.message.reply_text(response, reply_markup=reply_markup, parse_mode="HTML")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        help_text = (
            "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "üõí <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/catalog - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
            "/search [–∑–∞–ø—Ä–æ—Å] - –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä\n\n"
            "üì± <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/popular - –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤\n"
            "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ\n"
            "/support - –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
            "/clear - –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥\n\n"
            "üîç <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "<code>/search MacBook</code> - –Ω–∞–π—Ç–∏ –Ω–æ—É—Ç–±—É–∫–∏ Apple\n"
            "<code>/catalog</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        await update.message.reply_text(
            text=help_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        print(f"‚õî –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {str(e)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        error_text = (
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞."
        )
        await update.message.reply_text(error_text)


async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if 'current_product' not in context.user_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return ConversationHandler.END

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    return GET_NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True
        )
    )
    return GET_PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if update.message.contact:
            phone = update.message.contact.phone_number
        else:
            phone = update.message.text

        product = context.user_data['current_product']
        name = context.user_data['name']

        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO orders (user_id, user_name, user_phone, product_name, product_price) "
            "VALUES (?, ?, ?, ?, ?)",
            (update.message.from_user.id, name, phone, product['name'], product['price'])
        )
        conn.commit()
        conn.close()

        order_info = (
            f"üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üõç –¢–æ–≤–∞—Ä: {product['name']}\n"
            f"üíµ –¶–µ–Ω–∞: {format_price(product['price'])}\n"
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: @{update.message.from_user.username}"
        )

        await context.bot.send_message(
            chat_id=OWNER_CHAT_ID,
            text=order_info
        )

        await update.message.reply_text(
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return ConversationHandler.END

    except Exception as e:
        print(f"Database error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
    )
    return ConversationHandler.END


def main() -> None:
    app = Application.builder().token(TOKEN).build()

    order_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^üõí –ó–∞–∫–∞–∑–∞—Ç—å$"), start_order)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT, get_name)],
            GET_PHONE: [MessageHandler(filters.TEXT | filters.CONTACT, get_phone)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_order),
            MessageHandler(filters.Regex(r"^‚¨ÖÔ∏è"), cancel_order)
        ]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("catalog", show_categories))
    app.add_handler(CommandHandler("search", search_products))
    app.add_handler(CommandHandler("popular", show_popular))
    app.add_handler(CommandHandler("support", handle_support))
    app.add_handler(CommandHandler("about", show_about))
    app.add_handler(CommandHandler("clear", clear_context))
    app.add_handler(order_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()


if __name__ == "__main__":
    main()

