# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import sqlite3
import json
from pathlib import Path
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from typing import Dict, List

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = "–¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
CART, PHONE, NAME, DELIVERY, ADDRESS, CONFIRMATION = range(6)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "shop_bot.db"


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞
def load_shop_data():
    try:
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
        with open("shop_data.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        # –í–æ–∑–≤—Ä–∞—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        return {
            "name": "üî• Es computers",
            "address": "–≥.–ö—É—Ä—Å–∫ —ç–ª–µ–≤–∞—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫ 2",
            "phone": "+7 904 524 69 68",
            "website": "",
            "work_time": "üïí –ü–Ω-–ü—Ç: 10:00-19:00, –°–±-–í—Å: 11:00-17:00",
            "categories": ["üíª –ù–æ—É—Ç–±—É–∫–∏", "üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä—ã", "üì± –ì–∞–¥–∂–µ—Ç—ã", "üéß –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"],
            "products": {
                "üíª –ù–æ—É—Ç–±—É–∫–∏": [
                    {
                        "id": 1,
                        "name": "ASUS X515",
                        "price": 45000,
                        "description": "–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –∏–≥—Ä",
                        "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Core i5\n–û–ó–£: 8 –ì–ë\n–î–∏—Å–∫: 512 –ì–ë SSD",
                        "photo_url": "2025-05-04_11-03-46.png",
                    },
                    {
                        "id": 2,
                        "name": "HP Pavilion",
                        "price": 55000,
                        "description": "–°—Ç–∏–ª—å–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ —Å —ç–∫—Ä–∞–Ω–æ–º IPS",
                        "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 7\n–û–ó–£: 16 –ì–ë\n–î–∏—Å–∫: 1 –¢–ë HDD + 256 –ì–ë SSD",
                        "photo_url": "2025-05-04_11-03-00.png",
                    },
                ],
                "üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä—ã": [
                    {
                        "id": 3,
                        "name": "–ò–≥—Ä–æ–≤–æ–π –ü–ö",
                        "price": 85000,
                        "description": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞",
                        "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Core i7\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RTX 3070\n–û–ó–£: 32 –ì–ë",
                        "photo_url": "2025-05-04_10-58-36.png",
                    }
                ],
            },
        }


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
SHOP_INFO = load_shop_data()
PRODUCTS = SHOP_INFO["products"]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä–∑–∏–Ω, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""  
    CREATE TABLE IF NOT EXISTS carts (  
        user_id INTEGER PRIMARY KEY,  
        cart_data TEXT  
    )  
    """)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""  
    CREATE TABLE IF NOT EXISTS orders (  
        order_id INTEGER PRIMARY KEY AUTOINCREMENT,  
        user_id INTEGER,  
        user_name TEXT,  
        user_phone TEXT,  
        delivery_type TEXT,  
        delivery_address TEXT,  
        order_data TEXT,  
        total_price REAL,  
        status TEXT DEFAULT 'new',  
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
    )  
    """)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.commit()
    conn.close()


# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
init_db()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
def get_user_cart(user_id: int) -> Dict:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT cart_data FROM carts WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()

    # –í–æ–∑–≤—Ä–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –∏–ª–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    if result and result[0]:
        return json.loads(result[0])
    return {}


def save_user_cart(user_id: int, cart: Dict):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cart_json = json.dumps(cart)
    cursor.execute(
        "INSERT OR REPLACE INTO carts (user_id, cart_data) VALUES (?, ?)",
        (user_id, cart_json),
    )
    conn.commit()
    conn.close()


def clear_user_cart(user_id: int):
    # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM carts WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
def create_order(order_data: Dict) -> int:
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        """  
        INSERT INTO orders (  
            user_id, user_name, user_phone, delivery_type,  
            delivery_address, order_data, total_price  
        ) VALUES (?, ?, ?, ?, ?, ?, ?)  
        """,
        (
            order_data["user_id"],
            order_data["user_name"],
            order_data["user_phone"],
            order_data["delivery_type"],
            order_data["delivery_address"],
            json.dumps(order_data["order_data"]),
            order_data["total_price"],
        ),
    )
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return order_id


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_price(price: float) -> str:
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return f"{price:,.0f} —Ä—É–±".replace(",", " ")


def calculate_cart_total(cart: Dict) -> float:
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã
    total = 0.0
    for category, items in cart.items():
        for item_id, item_data in items.items():
            product = find_product_by_id(item_id)
            if product:
                total += product["price"] * item_data["quantity"]
    return total


def find_product_by_id(product_id: int) -> Dict:
    # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
    for category in PRODUCTS.values():
        for product in category:
            if product["id"] == product_id:
                return product
    return None


def find_product_by_name(product_name: str) -> Dict:
    # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    for category in PRODUCTS.values():
        for product in category:
            if product["name"] == product_name:
                return product
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        ["üìç –ê–¥—Ä–µ—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
        ["üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "üõí –¢–æ–≤–∞—Ä—ã"],
        ["üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>{SHOP_INFO['name']}</b>!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=reply_markup,
        parse_mode="HTML",
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
    help_text = """  
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>  
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É  
/cart - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É  
/contact - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è  
/about - –û –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ  
/promo - –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏  

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.  
"""
    await update.message.reply_text(help_text, parse_mode="HTML")


async def contact_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    response = (
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {SHOP_INFO['phone']}\n"
        f"üåê <b>–°–∞–π—Ç:</b> {SHOP_INFO['website']}\n"
        f"üè¨ <b>–ê–¥—Ä–µ—Å:</b> {SHOP_INFO['address']}"
    )
    await update.message.reply_text(response, parse_mode="HTML")


async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ
    about_text = f"""  
<b>{SHOP_INFO['name']}</b> - —ç—Ç–æ –º–∞–≥–∞–∑–∏–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤.  

–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ —Ä—ã–Ω–∫–µ —Å 2010 –≥–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.  

–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:  
‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å—é —Ç–µ—Ö–Ω–∏–∫—É  
‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏  
‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä  
‚úÖ –ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫  
"""
    await update.message.reply_text(about_text, parse_mode="HTML")


async def promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ü–∏—è—Ö
    promo_text = """  
<b>–ê–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>  

üî• <b>–¢–æ–ª—å–∫–æ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ–π!</b>  
–°–∫–∏–¥–∫–∞ 10% –Ω–∞ –≤—Å–µ –Ω–æ—É—Ç–±—É–∫–∏ ASUS  

üéÅ <b>–ö–æ–º–±–æ-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>  
–ò–≥—Ä–æ–≤–æ–π –ü–ö + –º–æ–Ω–∏—Ç–æ—Ä 27" + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –º—ã—à—å = 120 000 —Ä—É–± (—ç–∫–æ–Ω–æ–º–∏—è 15 000 —Ä—É–±)  

üí≥ <b>–†–∞—Å—Å—Ä–æ—á–∫–∞ 0%</b>  
–ù–∞ –≤—Å—é —Ç–µ—Ö–Ω–∏–∫—É —Å—Ä–æ–∫–æ–º –¥–æ 12 –º–µ—Å—è—Ü–µ–≤  
"""
    await update.message.reply_text(promo_text, parse_mode="HTML")


async def cart_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
    user_id = update.message.from_user.id
    cart = get_user_cart(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
    if not cart:
        await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
    cart_text = "<b>üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0.0

    # –ü–µ—Ä–µ–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    for category, items in cart.items():
        for item_id, item_data in items.items():
            product = find_product_by_id(int(item_id))
            if product:
                item_total = product["price"] * item_data["quantity"]
                total += item_total
                cart_text += (
                    f"<b>{product['name']}</b>\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item_data['quantity']}\n"
                    f"–¶–µ–Ω–∞: {format_price(product['price'])} x {item_data['quantity']} = {format_price(item_total)}\n\n"
                )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã
    cart_text += f"<b>–ò—Ç–æ–≥–æ: {format_price(total)}</b>"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã"],
        ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"],
        ["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    await update.message.reply_text(cart_text, reply_markup=reply_markup, parse_mode="HTML")
    return CART


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
async def start_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    user_id = update.message.from_user.id
    cart = get_user_cart(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
    if not cart:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return ConversationHandler.END

    # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await update.message.reply_text(
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True,
        ),
    )
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    if len(phone) < 5:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return PHONE

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
    context.user_data["phone"] = phone
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove(),
    )
    return NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name = update.message.text
    if len(name) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è")
        return NAME

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    context.user_data["name"] = name
    keyboard = [["üöó –°–∞–º–æ–≤—ã–≤–æ–∑", "üöö –î–æ—Å—Ç–∞–≤–∫–∞"], ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=reply_markup,
    )
    return DELIVERY


async def get_delivery(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_type = update.message.text
    if delivery_type not in ["üöó –°–∞–º–æ–≤—ã–≤–æ–∑", "üöö –î–æ—Å—Ç–∞–≤–∫–∞"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return DELIVERY

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    context.user_data["delivery_type"] = delivery_type

    # –ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    if delivery_type == "üöó –°–∞–º–æ–≤—ã–≤–æ–∑":
        context.user_data["address"] = SHOP_INFO["address"]
        return await confirm_order(update, context)
    else:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ - –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ADDRESS


async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    address = update.message.text
    if len(address) < 5:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å")
        return ADDRESS

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    context.user_data["address"] = address
    return await confirm_order(update, context)


async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    user_id = update.message.from_user.id
    cart = get_user_cart(user_id)
    total = calculate_cart_total(cart)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞
    order_summary = (
        "<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"<b>–ò–º—è:</b> {context.user_data['name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {context.user_data['phone']}\n"
        f"<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {context.user_data['delivery_type']}\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {context.user_data['address']}\n\n"
        "<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∫ —Å–≤–æ–¥–∫–µ
    for category, items in cart.items():
        for item_id, item_data in items.items():
            product = find_product_by_id(int(item_id))
            if product:
                item_total = product["price"] * item_data["quantity"]
                order_summary += (
                    f"- {product['name']} x {item_data['quantity']} = {format_price(item_total)}\n"
                )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã
    order_summary += f"\n<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {format_price(total)}</b>"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞
    await update.message.reply_text(
        order_summary,
        reply_markup=reply_markup,
        parse_mode="HTML",
    )
    return CONFIRMATION


async def finish_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    user_id = update.message.from_user.id
    cart = get_user_cart(user_id)
    total = calculate_cart_total(cart)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    order_data = {
        "user_id": user_id,
        "user_name": context.user_data["name"],
        "user_phone": context.user_data["phone"],
        "delivery_type": context.user_data["delivery_type"],
        "delivery_address": context.user_data["address"],
        "order_data": cart,
        "total_price": total,
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    order_id = create_order(order_data)
    clear_user_cart(user_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await update.message.reply_text(
        f"‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {format_price(total)}",
        reply_markup=ReplyKeyboardMarkup(
            [["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True
        ),
        parse_mode="HTML",
    )

    return ConversationHandler.END


async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
    await update.message.reply_text(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=ReplyKeyboardMarkup(
            [["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True
        ),
    )
    return ConversationHandler.END


async def cancel_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await update.message.reply_text(
        "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(
            [["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True
        ),
    )
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    user_id = update.message.from_user.id
    product_name = update.message.text
    product = find_product_by_name(product_name)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞
    if not product:
        await update.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    cart = get_user_cart(user_id)
    product_category = None

    # –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
    for category, products in PRODUCTS.items():
        for p in products:
            if p["name"] == product_name:
                product_category = category
                break
        if product_category:
            break

    if not product_category:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if product_category not in cart:
        cart[product_category] = {}

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    product_id = str(product["id"])
    if product_id in cart[product_category]:
        cart[product_category][product_id]["quantity"] += 1
    else:
        cart[product_category][product_id] = {"quantity": 1}

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    save_user_cart(user_id, cart)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    keyboard = [["üõí –ö–æ—Ä–∑–∏–Ω–∞", "‚¨ÖÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º"], ["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await update.message.reply_text(
        f"–¢–æ–≤–∞—Ä <b>{product['name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É",
        reply_markup=reply_markup,
        parse_mode="HTML",
    )


async def remove_from_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    user_id = update.message.from_user.id
    cart = get_user_cart(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
    if not cart:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    products_list = []
    for category, items in cart.items():
        for item_id, item_data in items.items():
            product = find_product_by_id(int(item_id))
            if product:
                products_list.append(product["name"])

    if not products_list:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    keyboard = [[product] for product in products_list] + [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup,
    )
    context.user_data["cart_action"] = "remove"
    return CART


async def update_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    user_id = update.message.from_user.id
    cart = get_user_cart(user_id)

    if not cart:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    products_list = []
    for category, items in cart.items():
        for item_id, item_data in items.items():
            product = find_product_by_id(int(item_id))
            if product:
                products_list.append(product["name"])

    if not products_list:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    keyboard = [[product] for product in products_list] + [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:",
        reply_markup=reply_markup,
    )
    context.user_data["cart_action"] = "update_quantity"
    return CART


async def handle_cart_product_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    user_id = update.message.from_user.id
    product_name = update.message.text
    product = find_product_by_name(product_name)

    if not product:
        await update.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return CART

    cart = get_user_cart(user_id)
    action = context.user_data.get("cart_action")

    if action == "remove":
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        for category, items in cart.items():
            if str(product["id"]) in items:
                del items[str(product["id"])]
                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
                if not items:
                    del cart[category]
                break

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        save_user_cart(user_id, cart)
        await update.message.reply_text(f"–¢–æ–≤–∞—Ä {product['name']} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        return await cart_command(update, context)

    elif action == "update_quantity":
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        context.user_data["selected_product"] = product
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart[next(cat for cat in cart if str(product['id']) in cart[cat])][str(product['id'])]['quantity']}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
            reply_markup=ReplyKeyboardRemove(),
        )
        return CART

    return CART


async def handle_quantity_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    try:
        quantity = int(update.message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return CART

    user_id = update.message.from_user.id
    product = context.user_data["selected_product"]
    cart = get_user_cart(user_id)

    # –ü–æ–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    for category, items in cart.items():
        if str(product["id"]) in items:
            if quantity == 0:
                del items[str(product["id"])]
                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
                if not items:
                    del cart[category]
            else:
                items[str(product["id"])]["quantity"] = quantity
            break

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    save_user_cart(user_id, cart)
    await update.message.reply_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {product['name']} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    return await cart_command(update, context)


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    response = None
    keyboard = None

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "üìç –ê–¥—Ä–µ—Å":
        response = f"üè¨ <b>–ù–∞—à –∞–¥—Ä–µ—Å:</b>\n{SHOP_INFO['address']}"
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        response = f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {SHOP_INFO['phone']}\nüåê <b>–°–∞–π—Ç:</b> {SHOP_INFO['website']}"
    elif text == "üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã":
        response = f"‚è≥ <b>–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:</b>\n{SHOP_INFO['work_time']}"
    elif text == "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞":
        return await cart_command(update, context)

    # –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
    elif text == "üõí –¢–æ–≤–∞—Ä—ã":
        keyboard = [
            SHOP_INFO["categories"][i: i + 2]
            for i in range(0, len(SHOP_INFO["categories"]), 2)
        ]
        keyboard.append(["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        response = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        keyboard = [
            ["üìç –ê–¥—Ä–µ—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            ["üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "üõí –¢–æ–≤–∞—Ä—ã"],
            ["üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞"],
        ]
        response = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    elif text == "‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        keyboard = [
            SHOP_INFO["categories"][i: i + 2]
            for i in range(0, len(SHOP_INFO["categories"]), 2)
        ]
        keyboard.append(["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        response = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    elif text == "‚¨ÖÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º":
        current_category = context.user_data.get("current_category")
        if current_category in PRODUCTS:
            products = [product["name"] for product in PRODUCTS[current_category]]
            keyboard = [[product] for product in products] + [["‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"]]
            response = f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {current_category}:"
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await cart_command(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    elif text in PRODUCTS:
        context.user_data["current_category"] = text
        products = [product["name"] for product in PRODUCTS[text]]
        keyboard = [[product] for product in products] + [["‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"]]
        response = f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {text}:"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    else:
        current_category = context.user_data.get("current_category")
        if current_category:
            for product in PRODUCTS.get(current_category, []):
                if text == product["name"]:
                    response = (
                        f"<b>{product['name']}</b>\n"
                        f"<i>{product['description']}</i>\n"
                        f"üíµ –¶–µ–Ω–∞: {format_price(product['price'])}\n"
                        f"üìù –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n{product['specs']}"
                    )
                    keyboard = [["üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"], ["‚¨ÖÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º"]]
                    if product.get("photo_url"):
                        await update.message.reply_photo(
                            product["photo_url"],
                            caption=response,
                            parse_mode="HTML",
                            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
                        )
                        return
                    break

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if response:
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else None
        await update.message.reply_text(
            response, reply_markup=reply_markup, parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    from telegram.error import TelegramError

    try:
        raise context.error
    except TelegramError as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        print(f"Telegram error: {e}")

        # –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        except:
            pass
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        print(f"Unexpected error: {e}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    checkout_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑$"), start_checkout),
            CommandHandler("order", start_checkout),
        ],
        states={
            PHONE: [MessageHandler(filters.TEXT | filters.CONTACT, get_phone)],
            NAME: [MessageHandler(filters.TEXT, get_name)],
            DELIVERY: [MessageHandler(filters.TEXT, get_delivery)],
            ADDRESS: [MessageHandler(filters.TEXT, get_address)],
            CONFIRMATION: [
                MessageHandler(filters.Regex("^‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑$"), finish_order),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å$"), cancel_order),
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_checkout),
            MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å$"), cancel_checkout),
        ],
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    cart_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞$"), cart_command),
            CommandHandler("cart", cart_command),
        ],
        states={
            CART: [
                MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã$"), lambda u, c: start(u, c)),
                MessageHandler(filters.Regex("^‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã$"), remove_from_cart),
                MessageHandler(filters.Regex("^‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ$"), update_quantity),
                MessageHandler(filters.Regex("^‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑$"), start_checkout),
                MessageHandler(filters.TEXT, handle_cart_product_selection),
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_checkout),
            MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), lambda u, c: start(u, c)),
        ],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("contact", contact_command))
    app.add_handler(CommandHandler("about", about_command))
    app.add_handler(CommandHandler("promo", promo_command))
    app.add_handler(checkout_conv)
    app.add_handler(cart_conv)

    app.add_handler(MessageHandler(filters.Regex("^üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É$"), add_to_cart))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.add_error_handler(error_handler)

    app.run_polling()


if __name__ == "__main__":
    main()
