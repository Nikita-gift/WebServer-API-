from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN = "7754017118:AAF8inVsWtgjR46_J7GVVhgL6IcjMurVnpI"

SHOP_INFO = {
    "name": "üî• Es computers",
    "address": "–≥.–ö—É—Ä—Å–∫ —ç–ª–µ–≤–∞—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫ 2",
    "phone": "+7 904 524 69 68",
    "website": "",
    "work_time": "üïí –ü–Ω-–ü—Ç: 10:00-19:00, –°–±-–í—Å: 11:00-17:00",
    "categories": ["üíª –ù–æ—É—Ç–±—É–∫–∏", "üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä—ã", "üì± –ì–∞–¥–∂–µ—Ç—ã", "üéß –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"]
}

PRODUCTS = {
    "üíª –ù–æ—É—Ç–±—É–∫–∏": [
        {
            "name": "ASUS X515",
            "price": "45 000 —Ä—É–±",
            "description": "–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –∏–≥—Ä",
            "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Core i5\n–û–ó–£: 8 –ì–ë\n–î–∏—Å–∫: 512 –ì–ë SSD",
            "photo_url": "https://example.com/asus_x515.jpg"
        },
        {
            "name": "HP Pavilion",
            "price": "55 000 —Ä—É–±",
            "description": "–°—Ç–∏–ª—å–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ —Å —ç–∫—Ä–∞–Ω–æ–º IPS",
            "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 7\n–û–ó–£: 16 –ì–ë\n–î–∏—Å–∫: 1 –¢–ë HDD + 256 –ì–ë SSD",
            "photo_url": "https://example.com/hp_pavilion.jpg"
        }
    ],
    "üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä—ã": [
        {
            "name": "–ò–≥—Ä–æ–≤–æ–π –ü–ö",
            "price": "85 000 —Ä—É–±",
            "description": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞",
            "specs": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Core i7\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RTX 3070\n–û–ó–£: 32 –ì–ë",
            "photo_url": "https://example.com/gaming_pc.jpg"
        }
    ],
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        ["üìç –ê–¥—Ä–µ—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
        ["üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "üõí –¢–æ–≤–∞—Ä—ã"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>{SHOP_INFO['name']}</b>!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    response = None
    keyboard = None

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "üìç –ê–¥—Ä–µ—Å":
        response = f"üè¨ <b>–ù–∞—à –∞–¥—Ä–µ—Å:</b>\n{SHOP_INFO['address']}"
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        response = f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {SHOP_INFO['phone']}\nüåê <b>–°–∞–π—Ç:</b> {SHOP_INFO['website']}"
    elif text == "üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã":
        response = f"‚è≥ <b>–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:</b>\n{SHOP_INFO['work_time']}"
    
    # –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
    elif text == "üõí –¢–æ–≤–∞—Ä—ã":
        keyboard = [SHOP_INFO["categories"][i:i+2] for i in range(0, len(SHOP_INFO["categories"]), 2)]
        keyboard.append(["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        response = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        keyboard = [
            ["üìç –ê–¥—Ä–µ—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            ["üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "üõí –¢–æ–≤–∞—Ä—ã"],
        ]
        response = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    
    elif text == "‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        keyboard = [SHOP_INFO["categories"][i:i+2] for i in range(0, len(SHOP_INFO["categories"]), 2)]
        keyboard.append(["‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        response = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    elif text in PRODUCTS:
        context.user_data['current_category'] = text
        products = [product["name"] for product in PRODUCTS[text]]
        keyboard = [[product] for product in products] + [["‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"]]
        response = f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {text}:"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    else:
        current_category = context.user_data.get('current_category')
        if current_category:
            for product in PRODUCTS.get(current_category, []):
                if text == product["name"]:
                    response = (
                        f"<b>{product['name']}</b>\n"
                        f"<i>{product['description']}</i>\n"
                        f"üíµ –¶–µ–Ω–∞: {product['price']}\n"
                        f"üìù –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n{product['specs']}"
                    )
                    if product.get('photo_url'):
                        await update.message.reply_photo(
                            product['photo_url'],
                            caption=response,
                            parse_mode="HTML"
                        )
                        response = None
                    keyboard = [["‚¨ÖÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º"]]
                    break

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if response:
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else None
        await update.message.reply_text(response, reply_markup=reply_markup, parse_mode="HTML")

def main() -> None:
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
